import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:get/get.dart';

import '../../core/config/app_configs.dart';
import '../../core/utils/app_logger.dart';
import '../models/api_error.dart';
import '../models/api_response.dart';

/// Service x·ª≠ l√Ω t·∫•t c·∫£ API calls ƒë·∫øn Notion, ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn ƒë·ªÉ t·∫°o ra
/// c√°c trang t√†i li·ªáu c√≥ ƒë·ªãnh d·∫°ng chuy√™n nghi·ªáp, ƒë·∫πp m·∫Øt v√† chi ti·∫øt h∆°n.
///
/// C√°c c·∫£i ti·∫øn ch√≠nh:
/// - **C·∫•u tr√∫c module h√≥a:** Logic t·∫°o block ƒë∆∞·ª£c chia th√†nh c√°c h√†m nh·ªè h∆°n.
/// - **S·ª≠ d·ª•ng Block n√¢ng cao:** T·∫≠n d·ª•ng Callouts, Columns, Toggles v√† Code Blocks.
/// - **M·ª•c l·ª•c ƒë·ªông:** S·ª≠ d·ª•ng block `table_of_contents` c·ªßa Notion.
/// - **ƒê·ªãnh d·∫°ng b·∫£ng (Schema):** Tr√¨nh b√†y schema database m·ªôt c√°ch r√µ r√†ng.
/// - **ƒê·ªãnh d·∫°ng API Endpoint:** Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng endpoint trong toggle.
/// - **C·∫£i thi·ªán t√≠nh ·ªïn ƒë·ªãnh:** X·ª≠ l√Ω t·ªët h∆°n c√°c tr∆∞·ªùng h·ª£p thi·∫øu d·ªØ li·ªáu.
class NotionAPIService extends GetxService {
  static NotionAPIService? _instance;
  late Dio _dio;

  static NotionAPIService get instance {
    _instance ??= NotionAPIService._();
    return _instance!;
  }

  NotionAPIService._() {
    _initializeDio();
  }

  void _initializeDio() {
    _dio = Dio(
      BaseOptions(
        baseUrl: 'https://api.notion.com/v1',
        connectTimeout: AppConfigs.connectTimeout,
        receiveTimeout: AppConfigs.receiveTimeout,
        headers: {
          'Authorization': 'Bearer ${AppConfigs.apiKeyNotion}',
          'Notion-Version': '2022-06-28',
          'Content-Type': 'application/json',
        },
      ),
    );

    _dio.interceptors.add(
      LogInterceptor(
        requestBody: true,
        responseBody: true,
        logPrint: (object) => AppLogger.d('[NOTION] ${object.toString()}'),
      ),
    );
  }

  /// T·∫°o m·ªôt trang Notion m·ªõi v·ªõi ƒë·ªãnh d·∫°ng chuy√™n nghi·ªáp.
  ///
  /// [title] Ti√™u ƒë·ªÅ c·ªßa trang.
  /// [content] N·ªôi dung ƒë√£ ƒë∆∞·ª£c structure t·ª´ AI.
  /// Returns: URL c·ªßa trang Notion ho·∫∑c l·ªói.
  Future<ApiResponse<String>> createProjectDocument({
    required String title,
    required Map<String, dynamic> content,
  }) async {
    try {
      AppLogger.d("Creating advanced Notion document for: $title");

      // C·∫£i ti·∫øn: T·∫°o blocks v·ªõi c·∫•u tr√∫c module h√≥a v√† ƒë·ªãnh d·∫°ng n√¢ng cao.
      final blocks = _formatContentToNotionBlocks(content);

      final requestBody = {
        "parent": {"database_id": AppConfigs.dbIDNotion},
        "icon": {"type": "emoji", "emoji": "üìë"}, // Th√™m icon cho trang
        "properties": {
          "Name": {
            "title": [
              {
                "text": {"content": title},
              },
            ],
          },
        },
        "children": blocks,
      };

      AppLogger.d("Sending request to Notion API with advanced blocks...");
      final response = await _dio.post(
        '/pages',
        data: json.encode(requestBody),
      );

      AppLogger.d("Notion response status: ${response.statusCode}");

      if (response.statusCode == 200) {
        final pageUrl = response.data['url'] as String;
        AppLogger.d("Successfully created Notion page: $pageUrl");
        return Success(pageUrl);
      } else {
        AppLogger.e(
          "Notion API error: ${response.statusCode} - ${response.data}",
        );
        return Failure(
          ApiError.server(
            message: "L·ªói t·ª´ Notion API: ${response.statusMessage}",
            statusCode: response.statusCode ?? 500,
            technicalDetails: "Response data: ${response.data}",
          ),
        );
      }
    } on DioException catch (e) {
      AppLogger.e("DioException in Notion API: ${e.message}");
      AppLogger.e("Response data: ${e.response?.data}");

      String message = "L·ªói khi k·∫øt n·ªëi ƒë·∫øn Notion.";
      String technicalDetails = "DioException: ${e.message}";

      if (e.response != null) {
        final responseData = e.response?.data;
        final notionErrorCode = responseData?['code'];
        final notionErrorMessage = responseData?['message'];

        switch (e.response?.statusCode) {
          case 401:
            message = "API key c·ªßa Notion kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n.";
            technicalDetails = "Invalid API key. Notion code: $notionErrorCode";
            break;
          case 404:
            message =
                "Database ID c·ªßa Notion kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.";
            technicalDetails =
                "Database ID not found: ${AppConfigs.dbIDNotion}. Notion code: $notionErrorCode";
            break;
          case 400:
            message =
                "D·ªØ li·ªáu g·ª≠i l√™n kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u tr√∫c database v√† d·ªØ li·ªáu ƒë·∫ßu v√†o.";
            technicalDetails =
                "Bad request. Notion error: $notionErrorMessage. Data: $responseData";
            break;
          default:
            message = "L·ªói t·ª´ server Notion: ${e.response?.statusMessage}";
            technicalDetails =
                "Status: ${e.response?.statusCode}. Data: $responseData";
        }
      }
      return Failure(
        ApiError.fromDioException(
          e,
        ).copyWith(message: message, technicalDetails: technicalDetails),
      );
    } catch (e, stackTrace) {
      AppLogger.e("Unexpected error in Notion API");
      return Failure(ApiError.server(message: "message", statusCode: 1));
    }
  }

  /// -- C·∫¢I TI·∫æN L·ªöN: T√ÅCH LOGIC T·∫†O BLOCK TH√ÄNH C√ÅC H√ÄM RI√äNG BI·ªÜT --
  /// Chuy·ªÉn ƒë·ªïi n·ªôi dung t·ª´ AI th√†nh danh s√°ch c√°c block c·ªßa Notion.
  List<Map<String, dynamic>> _formatContentToNotionBlocks(
    Map<String, dynamic> content,
  ) {
    final List<Map<String, dynamic>> blocks = [];

    try {
      // -- TI√äU ƒê·ªÄ CH√çNH & M·ª§C L·ª§C T·ª∞ ƒê·ªòNG --
      blocks.add(
        _createHeading1Block(content['title'] ?? 'Project Documentation'),
      );
      blocks.add(
        _createCalloutBlock(
          '‚ú®',
          'ƒê√¢y l√† t√†i li·ªáu d·ª± √°n ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi AI. T·∫•t c·∫£ c√°c m·ª•c ch√≠nh ƒë·ªÅu c√≥ trong m·ª•c l·ª•c b√™n d∆∞·ªõi.',
        ),
      );
      blocks.add(_createHeading2Block("M·ª•c L·ª•c"));
      blocks.add(
        _createTableOfContentsBlock(),
      ); // M·ª•c l·ª•c t·ª± ƒë·ªông d·ª±a tr√™n c√°c heading
      blocks.add(_createDividerBlock());

      // -- C√ÅC PH·∫¶N C·ª¶A T√ÄI LI·ªÜU --
      // M·ªói ph·∫ßn ƒë∆∞·ª£c t·∫°o b·ªüi m·ªôt h√†m ri√™ng ƒë·ªÉ d·ªÖ qu·∫£n l√Ω.
      blocks.addAll(_buildOverviewSection(content));
      blocks.addAll(_buildRequirementsSection(content));
      blocks.addAll(_buildArchitectureSection(content));
      blocks.addAll(_buildTechStackSection(content));
      blocks.addAll(_buildCoreFeaturesSection(content));
      blocks.addAll(_buildDatabaseSection(content));
      blocks.addAll(_buildApiSection(content));
      blocks.addAll(_buildImplementationPlanSection(content));

      // -- FOOTER --
      blocks.add(_createDividerBlock());
      blocks.add(
        _createQuoteBlock(
          "T√†i li·ªáu ƒë∆∞·ª£c t·∫°o v√†o l√∫c: ${DateTime.now().toLocal().toString().substring(0, 16)} b·ªüi Mind AI App.",
        ),
      );
    } catch (e, stackTrace) {
      AppLogger.e("Error formatting Notion blocks");
      return [
        _createHeading1Block("L·ªói T·∫°o T√†i Li·ªáu"),
        _createCalloutBlock(
          "‚ùó",
          "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒë·ªãnh d·∫°ng n·ªôi dung. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c d·ªØ li·ªáu ƒë·∫ßu v√†o. Chi ti·∫øt l·ªói: $e",
        ),
      ];
    }

    return blocks;
  }

  // -- C√ÅC H√ÄM X√ÇY D·ª∞NG T·ª™NG PH·∫¶N --

  List<Map<String, dynamic>> _buildOverviewSection(
    Map<String, dynamic> content,
  ) {
    if (content['overview'] == null) return [];
    return [
      _createHeading2Block("1. T·ªïng Quan D·ª± √Ån"),
      _createParagraphBlock(content['overview']),
      if (content['keyMetrics'] != null)
        _createCalloutBlock('üéØ', "Key Metrics: ${content['keyMetrics']}"),
      _createDividerBlock(),
    ];
  }

  List<Map<String, dynamic>> _buildRequirementsSection(
    Map<String, dynamic> content,
  ) {
    final List<Map<String, dynamic>> sectionBlocks = [];

    final funcReqs = content['functionalRequirements'];
    final nonFuncReqs = content['nonFunctionalRequirements'];

    if (funcReqs == null && nonFuncReqs == null) return [];

    sectionBlocks.add(_createHeading2Block("2. Ph√¢n T√≠ch Y√™u C·∫ßu"));

    // Y√™u c·∫ßu ch·ª©c nƒÉng
    if (funcReqs is List && funcReqs.isNotEmpty) {
      sectionBlocks.add(_createHeading3Block("2.1. Y√™u C·∫ßu Ch·ª©c NƒÉng"));
      for (final req in funcReqs) {
        if (req is Map) {
          final title = req['title'] ?? 'Ch∆∞a c√≥ ti√™u ƒë·ªÅ';
          final description = req['description'] ?? 'Ch∆∞a c√≥ m√¥ t·∫£.';
          // S·ª≠ d·ª•ng toggle ƒë·ªÉ g·ªçn g√†ng h∆°n
          sectionBlocks.add(
            _createToggleBlock(title, [_createParagraphBlock(description)]),
          );
        }
      }
    }

    // Y√™u c·∫ßu phi ch·ª©c nƒÉng
    if (nonFuncReqs is List && nonFuncReqs.isNotEmpty) {
      sectionBlocks.add(_createHeading3Block("2.2. Y√™u C·∫ßu Phi Ch·ª©c NƒÉng"));
      for (final req in nonFuncReqs) {
        sectionBlocks.add(_createBulletedListBlock(req.toString()));
      }
    }

    sectionBlocks.add(_createDividerBlock());
    return sectionBlocks;
  }

  List<Map<String, dynamic>> _buildArchitectureSection(
    Map<String, dynamic> content,
  ) {
    if (content['architecture'] == null) return [];
    return [
      _createHeading2Block("3. Ki·∫øn Tr√∫c H·ªá Th·ªëng"),
      _createParagraphBlock(content['architecture']),
      _createDividerBlock(),
    ];
  }

  List<Map<String, dynamic>> _buildTechStackSection(
    Map<String, dynamic> content,
  ) {
    final frontend = content['frontendTech'];
    final backend = content['backendTech'];

    if (frontend == null && backend == null) return [];

    // S·ª≠ d·ª•ng c·ªôt ƒë·ªÉ tr√¨nh b√†y ƒë·∫πp h∆°n
    final List<Map<String, dynamic>> feBlocks = [];
    if (frontend is List && frontend.isNotEmpty) {
      feBlocks.add(_createHeading3Block("Frontend"));
      for (final tech in frontend) {
        if (tech is Map) {
          feBlocks.add(
            _createBulletedListBlock("**${tech['name']}:** ${tech['reason']}"),
          );
        }
      }
    }

    final List<Map<String, dynamic>> beBlocks = [];
    if (backend is List && backend.isNotEmpty) {
      beBlocks.add(_createHeading3Block("Backend"));
      for (final tech in backend) {
        if (tech is Map) {
          beBlocks.add(
            _createBulletedListBlock("**${tech['name']}:** ${tech['reason']}"),
          );
        }
      }
    }

    return [
      _createHeading2Block("4. C√¥ng Ngh·ªá S·ª≠ D·ª•ng"),
      _createColumnListBlock([
        feBlocks,
        beBlocks,
      ]), // C·ªôt 1: Frontend, C·ªôt 2: Backend
      _createDividerBlock(),
    ];
  }

  List<Map<String, dynamic>> _buildCoreFeaturesSection(
    Map<String, dynamic> content,
  ) {
    final features = content['coreFeatures'];
    if (features is! List || features.isEmpty) return [];

    final List<Map<String, dynamic>> sectionBlocks = [];
    sectionBlocks.add(_createHeading2Block("5. T√≠nh NƒÉng Ch√≠nh"));

    int index = 1;
    for (final feature in features) {
      if (feature is! Map) continue;

      sectionBlocks.add(
        _createHeading3Block("5.$index. ${feature['name'] ?? 'Ch∆∞a c√≥ t√™n'}"),
      );
      sectionBlocks.add(_createParagraphBlock(feature['description'] ?? ''));

      if (feature['userStory'] != null) {
        sectionBlocks.add(
          _createQuoteBlock("User Story: ${feature['userStory']}"),
        );
      }

      final criteria = feature['acceptanceCriteria'];
      if (criteria is List && criteria.isNotEmpty) {
        sectionBlocks.add(_createParagraphBlock("**Ti√™u ch√≠ nghi·ªám thu:**"));
        for (final item in criteria) {
          sectionBlocks.add(_createCheckboxBlock(item.toString(), false));
        }
      }
      index++;
    }

    sectionBlocks.add(_createDividerBlock());
    return sectionBlocks;
  }

  List<Map<String, dynamic>> _buildDatabaseSection(
    Map<String, dynamic> content,
  ) {
    final database = content['database'];
    final tables = database?['tables'];
    if (tables is! List || tables.isEmpty) return [];

    final List<Map<String, dynamic>> sectionBlocks = [];
    sectionBlocks.add(_createHeading2Block("6. Thi·∫øt K·∫ø Database"));
    sectionBlocks.add(
      _createCalloutBlock(
        '‚ÑπÔ∏è',
        'D∆∞·ªõi ƒë√¢y l√† schema d·ª± ki·∫øn cho c√°c b·∫£ng trong database. M·ªói b·∫£ng ƒë∆∞·ª£c ƒë·∫∑t trong m·ªôt toggle.',
      ),
    );

    for (final table in tables) {
      if (table is! Map) continue;

      final tableName = table['name'] ?? 'Ch∆∞a c√≥ t√™n b·∫£ng';
      final fields = table['fields'];
      final List<Map<String, dynamic>> fieldBlocks = [];

      if (fields is List && fields.isNotEmpty) {
        for (final field in fields) {
          if (field is Map) {
            final fieldInfo =
                "**${field['name']}** (`${field['type']}`) - ${field['description'] ?? 'Ch∆∞a c√≥ m√¥ t·∫£.'}";
            fieldBlocks.add(_createBulletedListBlock(fieldInfo));
          }
        }
      } else {
        fieldBlocks.add(
          _createParagraphBlock("Ch∆∞a c√≥ th√¥ng tin v·ªÅ c√°c tr∆∞·ªùng."),
        );
      }
      sectionBlocks.add(_createToggleBlock('üìú $tableName', fieldBlocks));
    }

    sectionBlocks.add(_createDividerBlock());
    return sectionBlocks;
  }

  List<Map<String, dynamic>> _buildApiSection(Map<String, dynamic> content) {
    final endpoints = content['apiEndpoints'];
    if (endpoints is! List || endpoints.isEmpty) return [];

    final List<Map<String, dynamic>> sectionBlocks = [];
    sectionBlocks.add(_createHeading2Block("7. API Documentation"));

    for (final endpoint in endpoints) {
      if (endpoint is! Map) continue;

      final method = endpoint['method'] ?? 'GET';
      final path = endpoint['path'] ?? '/';
      final title = '$method $path';

      sectionBlocks.add(
        _createToggleBlock(title, _formatApiEndpointToBlocks(endpoint)),
      );
    }

    sectionBlocks.add(_createDividerBlock());
    return sectionBlocks;
  }

  List<Map<String, dynamic>> _buildImplementationPlanSection(
    Map<String, dynamic> content,
  ) {
    final milestones = content['milestones'];
    if (milestones is! List || milestones.isEmpty) return [];

    final List<Map<String, dynamic>> sectionBlocks = [];
    sectionBlocks.add(_createHeading2Block("8. K·∫ø Ho·∫°ch Tri·ªÉn Khai"));

    for (final milestone in milestones) {
      if (milestone is! Map) continue;

      sectionBlocks.add(
        _createHeading3Block(milestone['phase'] ?? 'Giai ƒëo·∫°n'),
      );

      final List<Map<String, dynamic>> milestoneContent = [];
      milestoneContent.add(
        _createParagraphBlock(
          "**Th·ªùi gian d·ª± ki·∫øn:** ${milestone['duration'] ?? 'N/A'}",
        ),
      );

      final deliverables = milestone['deliverables'];
      if (deliverables is List && deliverables.isNotEmpty) {
        milestoneContent.add(_createParagraphBlock("**S·∫£n ph·∫©m b√†n giao:**"));
        for (final item in deliverables) {
          milestoneContent.add(_createCheckboxBlock(item.toString(), false));
        }
      }
      sectionBlocks.addAll(milestoneContent);
    }

    sectionBlocks.add(_createDividerBlock());
    return sectionBlocks;
  }

  /// -- C·∫¢I TI·∫æN: ƒê·ªãnh d·∫°ng API endpoint th√†nh m·ªôt danh s√°ch c√°c block thay v√¨ m·ªôt string --
  List<Map<String, dynamic>> _formatApiEndpointToBlocks(
    Map<dynamic, dynamic> endpoint,
  ) {
    final List<Map<String, dynamic>> blocks = [];
    final JsonEncoder encoder = JsonEncoder.withIndent('  ');

    blocks.add(
      _createParagraphBlock(
        "**M√¥ t·∫£:** ${endpoint['description'] ?? 'Ch∆∞a c√≥ m√¥ t·∫£.'}",
      ),
    );

    final params = endpoint['parameters'];
    if (params is List && params.isNotEmpty) {
      blocks.add(_createParagraphBlock("**Parameters:**"));
      for (final param in params) {
        if (param is Map) {
          blocks.add(
            _createBulletedListBlock(
              "`${param['name']}` (`${param['type']}`) - ${param['description'] ?? ''}",
            ),
          );
        }
      }
    }

    final reqBody = endpoint['requestBody'];
    if (reqBody != null) {
      blocks.add(_createParagraphBlock("**Request Body Example:**"));
      blocks.add(_createCodeBlock(encoder.convert(reqBody), 'json'));
    }

    final resExample = endpoint['responseExample'];
    if (resExample != null) {
      blocks.add(_createParagraphBlock("**Response Example:**"));
      blocks.add(_createCodeBlock(encoder.convert(resExample), 'json'));
    }

    return blocks;
  }

  // === C√ÅC H√ÄM HELPER T·∫†O NOTION BLOCK ===
  // (ƒê√£ ƒë∆∞·ª£c b·ªï sung th√™m c√°c block m·ªõi v√† ƒë·ªãnh d·∫°ng rich_text)

  Map<String, dynamic> _createRichText(String text) {
    // Helper ƒë·ªÉ x·ª≠ l√Ω markdown ƒë∆°n gi·∫£n nh∆∞ **bold** v√† `code`
    // ƒê√¢y l√† m·ªôt phi√™n b·∫£n ƒë∆°n gi·∫£n, c√≥ th·ªÉ m·ªü r·ªông th√™m
    // Hi·ªán t·∫°i Notion API kh√¥ng h·ªó tr·ª£ tr·ª±c ti·∫øp markdown trong m·ªôt text object
    // n√™n ch√∫ng ta s·∫Ω gi·ªØ n√≥ ƒë∆°n gi·∫£n.
    return {
      "type": "text",
      "text": {"content": text},
    };
  }

  Map<String, dynamic> _createHeading1Block(String text) => {
    "heading_1": {
      "rich_text": [_createRichText(text)],
      "color": "default",
    },
  };

  Map<String, dynamic> _createHeading2Block(String text) => {
    "heading_2": {
      "rich_text": [_createRichText(text)],
      "color": "default",
      "is_toggleable": false,
    },
  };

  Map<String, dynamic> _createHeading3Block(String text) => {
    "heading_3": {
      "rich_text": [_createRichText(text)],
      "color": "default",
      "is_toggleable": false,
    },
  };

  Map<String, dynamic> _createParagraphBlock(String text) => {
    "paragraph": {
      "rich_text": [_createRichText(text)],
    },
  };

  Map<String, dynamic> _createBulletedListBlock(String text) => {
    "bulleted_list_item": {
      "rich_text": [_createRichText(text)],
    },
  };

  Map<String, dynamic> _createCheckboxBlock(String text, bool checked) => {
    "to_do": {
      "rich_text": [_createRichText(text)],
      "checked": checked,
    },
  };

  Map<String, dynamic> _createToggleBlock(
    String title,
    List<Map<String, dynamic>> children,
  ) => {
    "toggle": {
      "rich_text": [_createRichText(title)],
      "children": children,
    },
  };

  Map<String, dynamic> _createCalloutBlock(String emoji, String text) => {
    "callout": {
      "icon": {"type": "emoji", "emoji": emoji},
      "rich_text": [_createRichText(text)],
    },
  };

  Map<String, dynamic> _createQuoteBlock(String text) => {
    "quote": {
      "rich_text": [_createRichText(text)],
    },
  };

  Map<String, dynamic> _createDividerBlock() => {"divider": {}};

  Map<String, dynamic> _createCodeBlock(String code, String language) => {
    "code": {
      "rich_text": [
        {
          "type": "text",
          "text": {"content": code},
        },
      ],
      "language": language,
    },
  };

  Map<String, dynamic> _createTableOfContentsBlock() => {
    "table_of_contents": {"color": "default"},
  };

  Map<String, dynamic> _createColumnListBlock(
    List<List<Map<String, dynamic>>> columnsChildren,
  ) {
    final columns = columnsChildren
        .map(
          (children) => {
            "object": "block",
            "type": "column",
            "column": {"children": children},
          },
        )
        .toList();

    return {
      "column_list": {"children": columns},
    };
  }
}
